AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Next.js blog deployment on App Runner'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment type (dev/prod)

Resources:
  # Lambda execution role for custom resource
  ImageCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Environment}-blog-template

  # Lambda function to check for image existence
  ImageCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ImageCheckLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      ecr = boto3.client('ecr')
                      repository = event['ResourceProperties']['RepositoryName']
                      max_attempts = 30  # 5 minutes with 10 second delays
                      
                      for attempt in range(max_attempts):
                          try:
                              response = ecr.describe_images(
                                  repositoryName=repository,
                                  imageIds=[{'imageTag': 'latest'}]
                              )
                              if response['imageDetails']:
                                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                                      'Message': 'Image found'
                                  })
                                  return
                          except ecr.exceptions.ImageNotFoundException:
                              if attempt < max_attempts - 1:
                                  time.sleep(10)
                              continue
                      
                      # If we get here, we've timed out waiting for the image
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          'Message': 'Timeout waiting for image'
                      })
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          'Message': str(e)
                      })
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Message': 'Nothing to do for Delete'
                  })
      Timeout: 300

  BlogDeploymentRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Environment}-blog-deployment-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - build.apprunner.amazonaws.com
                - tasks.apprunner.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess'
      Policies:
        - PolicyName: !Sub ${Environment}-app-runner-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                Resource: '*'

  BlogECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub ${Environment}-blog-template
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

  # Custom resource to wait for image
  ImageWaiter:
    Type: Custom::ImageWaiter
    DependsOn: BlogECRRepository
    Properties:
      ServiceToken: !GetAtt ImageCheckLambda.Arn
      RepositoryName: !Sub ${Environment}-blog-template

  BlogAppRunnerService:
    Type: 'AWS::AppRunner::Service'
    DependsOn: ImageWaiter
    Properties:
      ServiceName: !Sub ${Environment}-blog-template
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt BlogDeploymentRole.Arn
        AutoDeploymentsEnabled: true
        ImageRepository:
          ImageIdentifier: !Sub ${BlogECRRepository.RepositoryUri}:latest
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: 3000
            RuntimeEnvironmentVariables:
              - Name: NODE_ENV
                Value: !If [IsProd, 'production', 'development']
      InstanceConfiguration:
        Cpu: 1024
        Memory: 2048

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Outputs:
  AppRunnerServiceArn:
    Description: ARN of the App Runner service
    Value: !GetAtt BlogAppRunnerService.ServiceArn
  AppRunnerServiceURL:
    Description: URL of the App Runner service
    Value: !GetAtt BlogAppRunnerService.ServiceUrl
  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !GetAtt BlogECRRepository.RepositoryUri